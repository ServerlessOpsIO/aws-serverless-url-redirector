service: aws-serverless-website-redirector

custom:
  service_location: ${env:SLS_SERVICE_LOCATION, 'example.com'}
  service_domain: ${env:SLS_SERVICE_DOMAIN, env:SLS_SERVICE_LOCATION, 'example.com'}
  redirect_protocol: ${env:SLS_REDIRECT_PROTOCOL, 'https'}
  redirect_location: ${env:SLS_REDIRECT_LOCATION, 'www.example.com'}

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, env:SLS_STAGE, 'dev'}
  profile: ${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}

functions:
  websiteRedirector:
    handler: handlers/website-redirector.handler
    memorySize: 128
    environment:
      REDIRECT_LOCATION: "${self:custom.redirect_protocol}://${self:custom.redirect_location}"
      STATUS_CODE: ${env:SLS_STATUS_CODE, '301'}
      LOG_LEVEL: INFO
    events:
      - http:
          method: any
          path: ''

resources:
  Resources:
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi # our default Rest API logical ID
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        PathPart: "{proxy+}"

    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: ANY
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY
          Uri:
            Fn::Join:
              - ""
              - - "arn:aws:apigateway:"
                - Ref: "AWS::Region"
                - ":lambda:path/2015-03-31/functions/"
                - Fn::GetAtt:
                  - "WebsiteRedirectorLambdaFunction"
                  - "Arn"
                - "/invocations"
          IntegrationHttpMethod: POST

    Certificate:
      Type: "AWS::CertificateManager::Certificate"
      Properties:
        DomainName: ${self:custom.service_location}
        DomainValidationOptions:
        - DomainName: ${self:custom.service_location}
          ValidationDomain: ${self:custom.service_domain}

    DomainName:
      Type: "AWS::ApiGateway::DomainName"
      Properties:
        CertificateArn:
          Ref: Certificate
        DomainName: ${self:custom.service_location}

    BasePathMapping:
      Type: "AWS::ApiGateway::BasePathMapping"
      Properties:
        DomainName:
          Ref: DomainName
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}

    Route53Rr:
      Type: "AWS::Route53::RecordSet"
      Properties:
        HostedZoneName: "${self:custom.service_domain}."
        Comment: "URL redirection service"
        Type: "A"
        Name: ${self:custom.service_location}
        AliasTarget:
          HostedZoneId: "Z2FDTNDATAQYW2"
          DNSName:
            Fn::GetAtt:
              - DomainName
              - DistributionDomainName

